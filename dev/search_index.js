var documenterSearchIndex = {"docs":
[{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"EditURL = \"../../../literate/tutorial/two_stage_analysis.jl\"","category":"page"},{"location":"generated/tutorial/two_stage_analysis/#Two-stage-EEG-analysis-using-Unfold-and-UnfoldStats","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis using Unfold & UnfoldStats","text":"","category":"section"},{"location":"generated/tutorial/two_stage_analysis/#0.-Setup","page":"Two-stage EEG analysis","title":"0. Setup","text":"","category":"section"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"Load required packages.","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"using UnfoldStats\nusing Unfold\nusing DataFrames\nusing Chain\nusing Statistics\nusing HypothesisTests\nusing CairoMakie\nusing UnfoldMakie","category":"page"},{"location":"generated/tutorial/two_stage_analysis/#1.-Simulate-data","page":"Two-stage EEG analysis","title":"1. Simulate data","text":"","category":"section"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"This section can be skipped, if one already has (real) data that they want to analyse.","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"<details>\n<summary>Click to expand the simulation details</summary>","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"using UnfoldSim\nusing StableRNGs\n\ndesign = MultiSubjectDesign(\n    n_subjects = 20,\n    n_items = 100,\n    items_between = Dict(:continuous => range(0, 2, length = 10)),\n)\n\nβ = [1, 1, 0.5, 0.2]\nσs = Dict(:subject => [1, 0.1, 0.1, 0.1])\n\nsignal = MixedModelComponent(;\n    basis = UnfoldSim.hanning(50),\n    formula = @formula(\n        0 ~\n            1 +\n            continuous +\n            continuous^2 +\n            continuous^3 +\n            (1 + continuous + continuous^2 + continuous^3 | subject)\n    ),\n    β = β,\n    σs = σs,\n)\n\nhart = headmodel(type = \"hartmut\")\nsignal_multichannel = MultichannelComponent(signal, hart => \"Left Postcentral Gyrus\")\n\nonset = UniformOnset(; width = 50, offset = 60)\nnoise = PinkNoise(; noiselevel = 5)","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"</details >","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"data, events = simulate(\n    StableRNG(1),\n    design,\n    signal_multichannel,\n    onset,\n    noise,\n    return_epoched = false,\n);\nnothing #hide","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"<details>\n<summary>Click to expand event data frame </summary>","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"first(events, 12)","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"</details >","category":"page"},{"location":"generated/tutorial/two_stage_analysis/#2.-Fit-an-Unfold-model-for-each-subject-(first-stage)","page":"Two-stage EEG analysis","title":"2. Fit an Unfold model for each subject (first stage)","text":"","category":"section"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"In the first stage, we fit an Unfold model for each subject separately.","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"# Specify a temporal basis function\nbasisfunction = firbasis((-0.1, 0.7), 100)\n\n# Specify the model formula\nformula = @formula 0 ~ 1 + spl(continuous, 4)\n\n# Combine basisfunction and formula in an event dict\nevent_dict = Dict(Any => (formula, basisfunction))\n\nsubject_list = unique(events.subject)\nmodel_list = UnfoldLinearModelContinuousTime[]\n\n# Slice the data by its last dimension (i.e. the subject dimension)\ndata_slices = eachslice(data, dims = ndims(data))\n\nfor s = 1:size(data, ndims(data))\n    m = fit(\n        UnfoldModel,\n        event_dict,\n        subset(events, :subject => ByRow(==(subject_list[s]))),\n        data_slices[s],\n    )\n    push!(model_list, m)\nend\n\nmodels = DataFrame(subject = subject_list, unfoldmodel = model_list);\nsize(models)","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"As a result, we get a dataframe which contains an Unfold model for each subject.","category":"page"},{"location":"generated/tutorial/two_stage_analysis/#3.-Compute-and-visualize-the-marginal-effects","page":"Two-stage EEG analysis","title":"3. Compute and visualize the marginal effects","text":"","category":"section"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"In the next step, we will compute the marginal effects of the continuous predictor i.e. how the prediction changes for different levels of this predictor. First, we compute the marginal effects separately for each subject. Then we aggregate them over subjects using the mean.","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"# Specify the predictors of interest\npredictor_dict = Dict(:continuous => range(0, 2, length = 3))\n\n# Compute the marginal effects for all subjects separately\neffects_all_subjects = combine(\n    groupby(models, :subject),\n    :unfoldmodel => (m -> effects(predictor_dict, m[1])) => AsTable,\n)\n\n# Aggregate the marginal effects (per event type, time point and channel) over subjects\n# using the mean as aggregation function\naggregated_effects = @chain effects_all_subjects begin\n    groupby([:basisname, :channel, collect(keys(predictor_dict))..., :time])\n    combine(:yhat .=> [x -> mean(skipmissing(x))] .=> Symbol(\"yhat_\", mean))\nend;\nfirst(aggregated_effects, 5)","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"Next, we want to visualize the marginal effects in a topoplot series. For this we first need to extract the electrode positions for our simulated data (or your real data) and project them from 3d to 2d.","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"# Extract the electrode positions for the simulated data from the headmodel\n# and project them from 3d to 2d.\npos3d = hart.electrodes[\"pos\"];\npos2d = to_positions(pos3d')\npos2d = [Point2f(p[1] + 0.5, p[2] + 0.5) for p in pos2d];\nnothing #hide","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"For visualization, we use the plot_topoplotseries function from UnfoldMakie. In the topoplot series, the time in seconds (binned in time windows) is represented from left to right. The rows (from top to bottom) represent the marginal effects for different levels of the predictor continuous.","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"# Set the size of the time bins for the topoplot series\nbin_size = 0.1\n\nf_effects = Figure(size = (1200, 600))\ntp_effects = plot_topoplotseries!(\n    f_effects,\n    aggregated_effects,\n    bin_size,\n    positions = pos2d,\n    mapping = (; y = :yhat_mean, row = :continuous),\n    visual = (; enlarge = 0.6, label_scatter = false, colorrange = (-3, 3)),\n)\n\nax = current_axis()\nlinkaxes!(tp_effects.content[1:end-2]...)\nxlims!(ax, 0, 0.9)\nylims!(ax, 0, 0.9)\ncurrent_figure()","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"In the time windows [0.1, 0.2), [0.2, 0.3) and [0.3, 0.4), one can see the effect of continuous that we simulated. In the next section, we want to quantify and test this effect.","category":"page"},{"location":"generated/tutorial/two_stage_analysis/#4.-Extract-coefficients-and-conduct-Hotelling's-T-tests","page":"Two-stage EEG analysis","title":"4. Extract coefficients & conduct Hotelling's T² tests","text":"","category":"section"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"We will use a one-sample Hotelling's T² test to test whether at least one of the spline coefficients is different from 0. First, we extract the spline coefficients (for the continuous predictor variable) for all subjects. Then we conduct a Hotelling's T² test separately for each channel and time point and extract the correspoding p-value.","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"# Extract the spline coefficients for the `continuous` predictor variable\n# from the Unfold models of all subjects\nbasisname = unique(effects_all_subjects.basisname)\ncoefs = extract_coefs(models.unfoldmodel, :continuous, basisname)\n\n# Conduct a one-sample Hotelling's T² test separately for all channels and time points\n# and compute a p-value. We compare the spline coefficients vector against 0.\np_values =\n    mapslices(c -> pvalue(OneSampleHotellingT2Test(c', [0, 0, 0])), coefs, dims = (3, 4)) |>\n    x -> dropdims(x, dims = (3, 4));\n\ntimes = unique(effects_all_subjects.time)\nchannels = axes(p_values, 1)\n\n# For visualization purposes, save the p_values in a data frame together with time and channel\np_values_df = DataFrame(\n    channel = repeat(channels, outer = length(times)),\n    time = repeat(times, inner = length(channels)),\n    p_values = p_values[:],\n);\n\nfirst(p_values_df, 5)","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"As a last step, we visualize the p-values in a topoplot series.","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"bin_size = 0.1\n\nf_pvalues = Figure(size = (1200, 200))\ntp_pvalues = plot_topoplotseries!(\n    f_pvalues,\n    p_values_df,\n    bin_size,\n    positions = pos2d,\n    mapping = (; y = :p_values),\n    visual = (; enlarge = 0.6, label_scatter = false, colorrange = (0, 0.1)),\n    colorbar = (; label = \"p-value\"),\n)\n\nax = current_axis()\nlinkaxes!(tp_pvalues.content[1:end-2]...)\nxlims!(ax, 0, 0.9)\nylims!(ax, 0, 0.9)\ncurrent_figure()","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"note: Note\nTo decide whether to consider the effect statistically significant and to correct for multiple comparisons (due to different time points and channels), one could conduct a cluster-permutation test using the Hotelling's T² values as the test statistic.","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"","category":"page"},{"location":"generated/tutorial/two_stage_analysis/","page":"Two-stage EEG analysis","title":"Two-stage EEG analysis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = UnfoldStats","category":"page"},{"location":"#UnfoldStats","page":"Home","title":"UnfoldStats","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for UnfoldStats.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [UnfoldStats]","category":"page"},{"location":"#UnfoldStats.contained_or_equal-Tuple{Any, Any}","page":"Home","title":"UnfoldStats.contained_or_equal","text":"contained_or_equal(p, e)\n\nTest if p equals e or whether e contains p if e is a tuple.\n\n\n\n\n\n","category":"method"},{"location":"#UnfoldStats.extract_coefs-Tuple{Unfold.UnfoldModel, Any, Any}","page":"Home","title":"UnfoldStats.extract_coefs","text":"extract_coefs(model::UnfoldModel, predictor, basisname)\n\nReturn the coefficients of an Unfold model for a certain predictor and basisname.\n\nFor extracting the terms of a predictor variable predictor must be a symbol e.g. :continuous. For extracting the intercept predictor should be a String, i.e. \"(Intercept)\".\n\nbasisname must match one of the basis names which can be found in coeftable(model).\n\nNote: If a predictor variable has more than one term in the formula (e.g. a spline set, a categorical variable with several levels or an interaction), the coefficients for all terms are returned.\n\nThe dimensions of the returned coefficients are channel x times x coefficients.\n\n\n\n\n\n","category":"method"},{"location":"#UnfoldStats.extract_coefs-Tuple{Vector{<:Unfold.UnfoldModel}, Any, Any}","page":"Home","title":"UnfoldStats.extract_coefs","text":"extract_coefs(models::Vector{<:UnfoldModel}, predictor, basisname)\n\nWhen applied to a vector of Unfold models, extracts the coefficients (matching the predictor and basisname) for all models (usually subjects) and concatenates them.\n\nThe dimensions of the returned coefficients are channel x times x coefficients x subjects.\n\n\n\n\n\n","category":"method"},{"location":"#UnfoldStats.extract_symbol-Tuple{StatsModels.AbstractTerm}","page":"Home","title":"UnfoldStats.extract_symbol","text":"extract_symbol(t::AbstractTerm)\n\nReturn the symbol(s) underlying a term from a model formula, repeated by their actual coefficient number (after StatsModels.apply_schema).\n\nExamples\n\njulia> f = @formula 0 ~ 1 + spl(continuous, 4) + continuous + condition + pet + condition & pet\njulia> ... # apply schema using an event dataframe, according to StatsModels\njulia> extract_symbol(f)\n8-element Vector{Any}:\n \"(Intercept)\"\n :continuous\n :continuous\n :continuous\n :continuous\n :condition\n :pet\n (:condition, :pet)\n\nWe get the actual symbols of each predictor - this is different to a function that would return the symbol for each term, which would be [\"(Intercept)\", :continuous,:continuous,:condition,:pet,(:condition,:pet) ]\n\nThe difference between those two cases would get even more stark, if a basisfunction is in play as it timeexpand terms into many more predictors.\n\n\n\n\n\n","category":"method"},{"location":"#UnfoldStats.get_basisnames-Tuple{Unfold.UnfoldLinearModel}","page":"Home","title":"UnfoldStats.get_basisnames","text":"get_basisnames(model::UnfoldModel)\n\nReturn the basisnames for all predictor terms as a vector.\n\nThe returned vector contains the name of the event type/basis, repeated by their actual coefficient number (after StatsModels.apply_schema). If a model has more than one event type (e.g. stimulus and fixation), the vectors are concatenated.\n\n\n\n\n\n","category":"method"},{"location":"#UnfoldStats.get_predictor_string-Tuple{Symbol}","page":"Home","title":"UnfoldStats.get_predictor_string","text":"get_predictor_string(p)\n\nReturn string representation based on the type of p.\n\nThis function is used for a useful display of variables e.g. in an error message.\n\nExamples\n\njulia> UnfoldStats.get_predictor_string(:condition)\n\":condition\"\n\n\n\n\n\n","category":"method"}]
}
